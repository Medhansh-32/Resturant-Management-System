package gg.jte.generated.ondemand;
public final class JteadminGenerated {
	public static final String JTE_NAME = "admin.jte";
	public static final int[] JTE_LINE_INFO = {246,246,246,246,246,246,249,405,407,407,407,407,407,407};
	public static void render(gg.jte.html.HtmlTemplateOutput jteOutput, gg.jte.html.HtmlInterceptor jteHtmlInterceptor) {
		jteOutput.writeContent("<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>MarkFood Admin Dashboard</title>\r\n    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap\" rel=\"stylesheet\">\r\n    <style>\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n            font-family: 'Inter', sans-serif;\r\n        }\r\n\r\n        body {\r\n            background: #f0f2f5;\r\n            min-height: 100vh;\r\n            padding: 20px;\r\n        }\r\n\r\n        .dashboard {\r\n            max-width: 1400px;\r\n            margin: 0 auto;\r\n        }\r\n\r\n        .header {\r\n            background: white;\r\n            padding: 20px;\r\n            border-radius: 12px;\r\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n            margin-bottom: 20px;\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n        }\r\n\r\n        .header h1 {\r\n            color: #1a1a1a;\r\n            font-size: 1.8rem;\r\n        }\r\n\r\n        .status-counts {\r\n            display: flex;\r\n            gap: 15px;\r\n        }\r\n\r\n        .status-card {\r\n            background: white;\r\n            padding: 15px 25px;\r\n            border-radius: 8px;\r\n            box-shadow: 0 2px 4px rgba(0,0,0,0.05);\r\n        }\r\n\r\n        .status-card h3 {\r\n            color: #666;\r\n            font-size: 0.9rem;\r\n            margin-bottom: 5px;\r\n        }\r\n\r\n        .status-card .count {\r\n            font-size: 1.5rem;\r\n            font-weight: 600;\r\n            color: #1a1a1a;\r\n        }\r\n\r\n        .orders-container {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n            gap: 20px;\r\n            margin-top: 20px;\r\n        }\r\n\r\n        .order-card {\r\n            background: white;\r\n            border-radius: 12px;\r\n            padding: 20px;\r\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n            transition: transform 0.2s;\r\n        }\r\n\r\n        .order-card:hover {\r\n            transform: translateY(-2px);\r\n            box-shadow: 0 4px 8px rgba(0,0,0,0.1);\r\n        }\r\n\r\n        .order-header {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n            margin-bottom: 15px;\r\n        }\r\n\r\n        .order-id {\r\n            font-weight: 600;\r\n            color: #1a1a1a;\r\n        }\r\n\r\n        .order-time {\r\n            color: #666;\r\n            font-size: 0.9rem;\r\n        }\r\n\r\n        .customer-info {\r\n            margin-bottom: 15px;\r\n            padding-bottom: 15px;\r\n            border-bottom: 1px solid #eee;\r\n        }\r\n\r\n        .customer-info h3 {\r\n            font-size: 1rem;\r\n            color: #1a1a1a;\r\n            margin-bottom: 5px;\r\n        }\r\n\r\n        .customer-info p {\r\n            color: #666;\r\n            font-size: 0.9rem;\r\n        }\r\n\r\n        .order-items {\r\n            margin-bottom: 15px;\r\n        }\r\n\r\n        .order-item {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            margin-bottom: 5px;\r\n            font-size: 0.9rem;\r\n            color: #444;\r\n        }\r\n\r\n        .total-price {\r\n            font-weight: 600;\r\n            color: #1a1a1a;\r\n            text-align: right;\r\n            margin-bottom: 15px;\r\n            font-size: 1.1rem;\r\n        }\r\n\r\n        .status-controls {\r\n            display: flex;\r\n            gap: 10px;\r\n        }\r\n\r\n        .status-btn {\r\n            flex: 1;\r\n            padding: 8px;\r\n            border: none;\r\n            border-radius: 6px;\r\n            font-weight: 500;\r\n            cursor: pointer;\r\n            transition: all 0.2s;\r\n        }\r\n\r\n        .status-btn:hover {\r\n            opacity: 0.9;\r\n        }\r\n\r\n        .status-new {\r\n            background: #e3f2fd;\r\n            color: #1976d2;\r\n        }\r\n\r\n        .status-processing {\r\n            background: #fff3e0;\r\n            color: #f57c00;\r\n        }\r\n\r\n        .status-completed {\r\n            background: #e8f5e9;\r\n            color: #388e3c;\r\n        }\r\n\r\n        .status-cancelled {\r\n            background: #ffebee;\r\n            color: #d32f2f;\r\n        }\r\n\r\n        @media (max-width: 768px) {\r\n            .status-counts {\r\n                flex-wrap: wrap;\r\n            }\r\n\r\n            .status-card {\r\n                flex: 1 1 calc(50% - 10px);\r\n            }\r\n\r\n            .orders-container {\r\n                grid-template-columns: 1fr;\r\n            }\r\n        }\r\n\r\n        .order-status {\r\n            padding: 4px 8px;\r\n            border-radius: 4px;\r\n            font-size: 0.8rem;\r\n            font-weight: 500;\r\n        }\r\n\r\n        .status-label-new {\r\n            background: #e3f2fd;\r\n            color: #1976d2;\r\n        }\r\n\r\n        .status-label-processing {\r\n            background: #fff3e0;\r\n            color: #f57c00;\r\n        }\r\n\r\n        .status-label-completed {\r\n            background: #e8f5e9;\r\n            color: #388e3c;\r\n        }\r\n\r\n        .status-label-cancelled {\r\n            background: #ffebee;\r\n            color: #d32f2f;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n<div class=\"dashboard\">\r\n    <div class=\"header\">\r\n        <h1>Order Management Dashboard</h1>\r\n        <div class=\"status-counts\">\r\n            <div class=\"status-card\">\r\n                <h3>New Orders</h3>\r\n                <div class=\"count\" id=\"new-count\">0</div>\r\n            </div>\r\n            <div class=\"status-card\">\r\n                <h3>Processing</h3>\r\n                <div class=\"count\" id=\"processing-count\">0</div>\r\n            </div>\r\n            <div class=\"status-card\">\r\n                <h3>Completed</h3>\r\n                <div class=\"count\" id=\"completed-count\">0</div>\r\n            </div>\r\n            <div class=\"status-card\">\r\n                <h3>Cancelled</h3>\r\n                <div class=\"count\" id=\"cancelled-count\">0</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"orders-container\" id=\"orders-container\">\r\n        ");
		jteOutput.writeContent("\r\n    </div>\r\n</div>\r\n");
		jteOutput.writeContent("\r\n<script>\r\n    // WebSocket connection\r\n    const socket = new WebSocket('ws://localhost:8080/ws/orders');\r\n    const orders = new Map();\r\n\r\n    // WebSocket event handlers\r\n    socket.onopen = () => {\r\n        console.log('Connected to order updates');\r\n    };\r\n\r\n    socket.onmessage = (event) => {\r\n        const order = JSON.parse(event.data);\r\n        updateOrder(order);\r\n    };\r\n\r\n    socket.onerror = (error) => {\r\n        console.error('WebSocket error:', error);\r\n    };\r\n\r\n    // Update or add new order\r\n    function updateOrder(order) {\r\n        orders.set(order.id, order);\r\n        updateDashboard();\r\n    }\r\n\r\n    // Format date to readable string\r\n    function formatDateTime(dateArray) {\r\n        const date = new Date(Date.UTC(\r\n            dateArray[0], // Year\r\n            dateArray[1] - 1, // Month (0-indexed)\r\n            dateArray[2], // Day\r\n            dateArray[3], // Hour\r\n            dateArray[4], // Minute\r\n            dateArray[5], // Second\r\n            dateArray[6] // Millisecond\r\n        ));\r\n        return date.toLocaleString();\r\n    }\r\n\r\n    // Get status label class\r\n    function getStatusLabelClass(status) {\r\n        return `status-label-${status.toLowerCase()}`;\r\n    }\r\n\r\n    // Update the entire dashboard\r\n    function updateDashboard() {\r\n        updateStatusCounts();\r\n        renderOrders();\r\n    }\r\n\r\n    // Update status count cards\r\n    function updateStatusCounts() {\r\n        const counts = {\r\n            NEW: 0,\r\n            PROCESSING: 0,\r\n            COMPLETED: 0,\r\n            CANCELLED: 0\r\n        };\r\n\r\n        orders.forEach(order => {\r\n            counts[order.status]++;\r\n        });\r\n\r\n        document.getElementById('new-count').textContent = counts.NEW;\r\n        document.getElementById('processing-count').textContent = counts.PROCESSING;\r\n        document.getElementById('completed-count').textContent = counts.COMPLETED;\r\n        document.getElementById('cancelled-count').textContent = counts.CANCELLED;\r\n    }\r\n\r\n    // Render all orders\r\n    function renderOrders() {\r\n        const container = document.getElementById('orders-container');\r\n        container.innerHTML = '';\r\n\r\n        const sortedOrders = Array.from(orders.values())\r\n            .sort((a, b) => new Date(b.orderDateTime) - new Date(a.orderDateTime));\r\n\r\n        sortedOrders.forEach(order => {\r\n            const orderCard = createOrderCard(order);\r\n            container.appendChild(orderCard);\r\n        });\r\n    }\r\n\r\n    // Create order card element\r\n    function createOrderCard(order) {\r\n\r\n        const card = document.createElement('div');\r\n        card.className = 'order-card';\r\n        card.innerHTML = `\r\n            <div class=\"order-header\">\r\n                <span class=\"order-id\">Order #${order.id}</span>\r\n                <span class=\"order-status ${getStatusLabelClass(order.status)}\">${order.status}</span>\r\n            </div>\r\n        <div class=\"order-time\">${formatDateTime(order.orderDateTime)}</div>\r\n        <div class=\"customer-info\">\r\n            <h3>${order.customer.name}</h3>\r\n            <p>${order.customer.email}</p>\r\n            <p>${order.customer.phoneNumber}</p>\r\n        </div>\r\n        <div class=\"order-items\">\r\n            ${order.foodItems.map(item => `\r\n                        <div class=\"order-item\">\r\n                            <span>${item.name}</span>\r\n                            <span>₹${item.price}</span>\r\n                        </div>\r\n                    `).join('')}\r\n        </div>\r\n        <div class=\"total-price\">Total: ₹${order.totalPrice}</div>\r\n        <div class=\"status-controls\">\r\n            ${getStatusButtons(order)}\r\n        </div>\r\n        `;\r\n\r\n        return card;\r\n    }\r\n\r\n    // Generate status update buttons based on current status\r\n    function getStatusButtons(order) {\r\n        const currentStatus = order.status;\r\n        let buttons = '';\r\n\r\n        switch (currentStatus) {\r\n            case 'NEW':\r\n                buttons = `\r\n                    <button class=\"status-btn status-processing\" onclick=\"updateOrderStatus(${order.id}, 'PROCESSING')\">\r\n                        Start Processing\r\n                    </button>\r\n                <button class=\"status-btn status-cancelled\" onclick=\"updateOrderStatus(${order.id}, 'CANCELLED')\">\r\n                    Cancel\r\n                </button>\r\n                `;\r\n                break;\r\n            case 'PROCESSING':\r\n                buttons = `\r\n                    <button class=\"status-btn status-completed\" onclick=\"updateOrderStatus(${order.id}, 'COMPLETED')\">\r\n                        Complete\r\n                    </button>\r\n                <button class=\"status-btn status-cancelled\" onclick=\"updateOrderStatus(${order.id}, 'CANCELLED')\">\r\n                    Cancel\r\n                </button>\r\n                `;\r\n                break;\r\n        }\r\n\r\n        return buttons;\r\n    }\r\n\r\n    // Send status update to server\r\n    function updateOrderStatus(orderId, newStatus) {\r\n        socket.send(JSON.stringify({\r\n            orderId: orderId,\r\n            status: newStatus\r\n        }));\r\n    }\r\n</script>\r\n");
		jteOutput.writeContent("\r\n</body>\r\n</html>");
	}
	public static void renderMap(gg.jte.html.HtmlTemplateOutput jteOutput, gg.jte.html.HtmlInterceptor jteHtmlInterceptor, java.util.Map<String, Object> params) {
		render(jteOutput, jteHtmlInterceptor);
	}
}
